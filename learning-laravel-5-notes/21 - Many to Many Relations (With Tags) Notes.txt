Create Eloquent model

php artisan make:model Tag
Model created successfully.

Create a migration for the Tag and Pivot table

php artisan make:migration create_tags_table --create=tags
Created Migration: 2015_08_20_212546_create_tags_table

php artisan migrate
Migrated: 2015_08_20_212546_create_tags_table

php artisan tinker
$tag = new App\Tag;
$tag->name = 'personal';
$tag->save();

App\Tag::all()->toArray();
=> [
     [
       "id" => "1",
       "name" => "personal",
       "created_at" => "2015-08-20 22:55:42",
       "updated_at" => "2015-08-20 22:55:42",
     ],
   ]
   
App\Tag::lists('name');
=> Illuminate\Support\Collection {#719
     all: [
       "personal",
     ],
   }
   
$article = App\Article::first();
=> App\Article {#724
     id: "1",
     user_id: "1",
     title: "Article by Andrew",
     body: "and the body",
     created_at: "2015-08-14 23:59:30",
     updated_at: "2015-08-14 23:59:30",
     published_at: "2015-08-14 00:00:00",
     excerpt: null,
   }
   
$article->toArray();
=> [
     "id" => "1",
     "user_id" => "1",
     "title" => "Article by Andrew",
     "body" => "and the body",
     "created_at" => "2015-08-14 23:59:30",
     "updated_at" => "2015-08-14 23:59:30",
     "published_at" => "2015-08-14 00:00:00",
     "excerpt" => null,
   ]
   
If we want to insert a model on a mini-to-mini relationship, we can use the attach method.
Attach is very much like the pivot table, where you have your hooks there.
   
$article->tags()->attach(1);
	Illuminate\Database\QueryException with message 
	'SQLSTATE[23000]: Integrity constraint violation: 
	19 NOT NULL constraint failed: article_tag.created_at 
	(SQL: insert into "article_tag" ("article_id", "tag_id") values (1, 1))'
	
	Because we have timestamps on the table, we have to tell Laravel there are timestamps.
	They are not there by default, you have to opt-in Article.php tags
	
exit

php artisan tinker	

$article = App\Article::first();
=> App\Article {#715
     id: "1",
     user_id: "1",
     title: "Article by Andrew",
     body: "and the body",
     created_at: "2015-08-14 23:59:30",
     updated_at: "2015-08-14 23:59:30",
     published_at: "2015-08-14 00:00:00",
     excerpt: null,
   }

$article->tags()->attach(1);
=> null

Didn't get anything, but pretty sure it worked.

Let's see by using the general DB class in this case.

DB::select('select * from article_tag');
=> [
     {#713
       +"article_id": "1",
       +"tag_id": "1",
       +"created_at": "2015-08-20 23:17:41",
       +"updated_at": "2015-08-20 23:17:41",
     },
   ]
   
There we go, one row is in our pivot table.

We still have our Article object

$article->toArray();
=> [
     "id" => "1",
     "user_id" => "1",
     "title" => "Article by Andrew",
     "body" => "and the body",
     "created_at" => "2015-08-14 23:59:30",
     "updated_at" => "2015-08-14 23:59:30",
     "published_at" => "2015-08-14 00:00:00",
     "excerpt" => null,
   ]
   
$article->tags->toArray();
=> [
     [
       "id" => "1",
       "name" => "personal",
       "created_at" => "2015-08-20 22:55:42",
       "updated_at" => "2015-08-20 22:55:42",
       "pivot" => [
         "article_id" => "1",
         "tag_id" => "1",
         "created_at" => "2015-08-20 23:17:41",
         "updated_at" => "2015-08-20 23:17:41",
       ],
     ],
   ]
   
If we run $article->toArray(); again. Laravel is smart enough to store this, so it not
running a SQL query every single time.   

$article->toArray();

=> [
     "id" => "1",
     "user_id" => "1",
     "title" => "Article by Andrew",
     "body" => "and the body",
     "created_at" => "2015-08-14 23:59:30",
     "updated_at" => "2015-08-14 23:59:30",
     "published_at" => "2015-08-14 00:00:00",
     "excerpt" => null,
     "tags" => [
       [
         "id" => "1",
         "name" => "personal",
         "created_at" => "2015-08-20 22:55:42",
         "updated_at" => "2015-08-20 22:55:42",
         "pivot" => [
           "article_id" => "1",
           "tag_id" => "1",
           "created_at" => "2015-08-20 23:17:41",
           "updated_at" => "2015-08-20 23:17:41",
         ],
       ],
     ],
   ]
   
$article->tags->lists('name');
=> Illuminate\Database\Eloquent\Collection {#714
     all: [
       "personal",
     ],
   }
   
Will give all tags for a given article.

Let's do it in reverse.

$tag = App\Tag::first();
=> App\Tag {#724
     id: "1",
     name: "personal",
     created_at: "2015-08-20 22:55:42",
     updated_at: "2015-08-20 22:55:42",
   }      

$tag->toArray();
=> [
     "id" => "1",
     "name" => "personal",
     "created_at" => "2015-08-20 22:55:42",
     "updated_at" => "2015-08-20 22:55:42",
   ]
   
So we have that same tag.
   
Now, we want to get all articles that have been assigned to this tag.
$tag->articles->toArray();

Just an array with a single article.